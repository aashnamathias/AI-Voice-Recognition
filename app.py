# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-q3bABvYx_c-UUyUN-Ep5BHoKysyeDhj
"""

import streamlit as st
from transformers import Wav2Vec2Processor, Wav2Vec2ForCTC
import torch
import torchaudio
import tempfile
import re

st.title("üéôÔ∏è Voice Recognition")

# Helper function to capitalize sentences
def capitalize_sentences(text):
    text = text.strip().capitalize()
    sentences = re.split(r'\.\s+', text)
    capitalized = ['. '.join(s.capitalize() if s else '' for s in sentences)]
    return capitalized[0] if capitalized else ""

# Load Wav2Vec2 models
@st.cache_resource
def load_asr_model():
    processor = Wav2Vec2Processor.from_pretrained("facebook/wav2vec2-large-960h-lv60-self")
    model = Wav2Vec2ForCTC.from_pretrained("facebook/wav2vec2-large-960h-lv60-self")
    return processor, model

# Load punctuation model (trying fullstop-punctuation-multilang-large)
# @st.cache_resource
# def load_punctuation_model():
#     try:
#         from deepmultilingualpunctuation import PunctuationModel
#         model = PunctuationModel(model="oliverguhr/fullstop-punctuation-multilang-large")
#         st.write("fullstop-punctuation-multilang-large model loaded successfully.")
#         return model
#     except Exception as e:
#         st.error(f"‚ö†Ô∏è Error loading punctuation model: {e}")
#         return None

processor, model = load_asr_model()
# punct_model = load_punctuation_model()

uploaded_file = st.file_uploader("Upload a WAV file", type=["wav"])

if uploaded_file is not None:
    st.audio(uploaded_file)
    with tempfile.NamedTemporaryFile(delete=False) as tmp:
        tmp.write(uploaded_file.read())
        tmp_path = tmp.name
    try:
        speech_array, sampling_rate = torchaudio.load(tmp_path)
    except Exception as e:
        st.error(f"Error loading audio file: {e}")
        st.stop()
    if sampling_rate != 16000:
        resampler = torchaudio.transforms.Resample(orig_freq=sampling_rate, new_freq=16000)
        speech = resampler(speech_array).squeeze().numpy()
    else:
        speech = speech_array.squeeze().numpy()
    inputs = processor(speech, sampling_rate=16000, return_tensors="pt", padding=True)
    with st.spinner("Transcribing... please wait ‚è≥"):
        with torch.no_grad():
            logits = model(**inputs).logits
        predicted_ids = torch.argmax(logits, dim=-1)
        transcription = processor.decode(predicted_ids[0])

    st.markdown("### ‚úèÔ∏è Raw Transcription:")
    st.success(transcription)
    st.markdown(f"**üî¢ Word Count:** {len(transcription.split())}")

    # # Punctuation restoration
    # if punct_model is not None:
    #     with st.spinner("Restoring punctuation... ‚úçÔ∏è"):
    #         try:
    #             punctuated_text = punct_model.restore_punctuation(transcription)
    #             punctuated_text = capitalize_sentences(punctuated_text)
    #             st.markdown("### üìù Transcription with Punctuation:")
    #             st.info(punctuated_text)
    #         except Exception as e:
    #             st.error(f"‚ö†Ô∏è Punctuation restoration failed: {e}")
    #             st.warning("Displaying raw transcription without punctuation.")
    # else:
    #     st.warning("Punctuation model could not be loaded.")
    #     st.warning("Displaying raw transcription without punctuation.")
        
